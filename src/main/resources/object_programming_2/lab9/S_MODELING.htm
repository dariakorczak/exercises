<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html><head>
  <meta http-equiv="Content-Type" content="text/html; charset=windows-1250"><title>S_MODELING</title></head>
<body><h2 style="text-align: center;">Zadanie: œrodowisko modelowania</h2>Zadanie obejmuje material, dotycz¹cy: refleksji, adnotacji i skryptów.<br>W pe³nej wersji to zadanie stanowi ma³y projekt.<br>Dlatego na pocz¹tku zostan¹ przedstawione objaœnienia.<br>Na koñcu sformu³owane jest samo zadanie do wykonania - <a href="#zad">ZOBACZ</a>.<br>oraz wa¿na uwaga nt oprogramowania skryptow - <a href="#spom">SKRYPTY POMOC</a><br><span style="font-weight: bold;"></span><hr style="width: 100%; height: 2px;"><div style="text-align: center;"><span style="font-weight: bold;">Objaœnienia</span><br><span style="font-weight: bold;"></span></div><span style="font-weight: bold;"><br>1. Za³o¿enia ogólne</span><br><br>W klasach umieszczonych w pakiecie <span style="font-weight: bold;">models</span> zdefiniowano modele symulacyjne, wykonuj¹ce jakieœ obliczenia dla okresów (np. lat)<br>Definicja modelu zawiera:<br><ol><li>pole o nazwie LL,&nbsp;oznaczaj¹ce liczbê lat symulacji,</li><li>pola oznaczaj¹ce zmienne modelu - s¹ to tablice liczb rzeczywistych.</li><li>ew. pola pomocnicze</li><li>metodê public void run(), wykonuj¹ca obliczenia.</li><li>ew. inne metody pomocnicze.</li></ol>Pola 1 i 2 s¹ oznaczane adnotacj¹ @Bind, co umozliwia:<br>- nadanie wartoœci zmiennym wejœciowym modelu przed wykonaniem obliczeñ,<br>- pobranie wartoœci zmiennych wyliczonych w modelu (po wykonaniu obliczeñ).<br><br>Wszystkie
zmienne oznaczone adnotacj¹ @Bind s¹ dostêpne dla skryptów, które mog¹
byæ uruchamiane po wykonaniu obliczen modelowych i &nbsp;wykonywaæ
jakieœ dalsze obliczenia.<br>S¹ tak¿e dostêpne dla ew. innych modeli.<br><br>Zarz¹dzaniem obliczeniami zajmuje siê klasa <span style="font-weight: bold;">Controller</span>, która ma nastêpuj¹ce publiczne sk³adowe:<br><ul><li>konstruktor - Controller(String modelName) - parametrem jest tu nazwa klasy modelu,</li><li>Controller readDataFrom(String fname) - wczytuje dane do obliczeñ z &nbsp;pliku o nazwie fname.</li><li>Controller runModel() - uruchamia obliczenia modelowe,</li><li>Controller runScriptFromFile(String fname) &nbsp;- wykonuje skrypt z pliku o nazwie fname,</li><li>Controller runScript(String script) - wykonuje kod skryptu podany jako napis, </li><li>String
getResultsAsTsv() - zwraca wyniki obliczeñ (wszystkie zmienne z modelu
oraz zmienne utworzone w skryptach) w postaci &nbsp;napisu, którego
kolejne wiersze zawieraj¹ nazwê zmiennej i jej wartosci, rozdzielone
znakami tabulacji.</li></ul><span style="font-weight: bold;">2. &nbsp;Za³o¿enia co do danych wejœciowych</span><br><br>Pliki z danymi wejœciowymi zawieraj¹ w kolejnych wierszach dane w postaci:<br><br><span style="font-style: italic;">nazwa_zmiennej wartoœæ1 &nbsp;[ wartoœæ2 ... wartoœcN ]</span><br><br>Specjalny wiersz zaczynaj¹cy siê s³owem&nbsp; LATA specyfikuje lata obliczeñ, np.<br>LATA&nbsp; 2015 2016 2017 2018 2019<br><br>Na
podstawie tego wiersza definiowana jest wartoœæ specjalnej zmiennej LL
(liczba lat obliczeñ), dostepnej w modelu i w skryptach.<br><br>Wartoœci dla zmiennych mo¿e byæ od 1 do LL.<br>Jesli jest ich mniej ni¿ LL, to pozosta³e s¹ ustalane na ostatni¹ z podanych wartoœci.<br><br><span style="font-weight: bold;">3. Przyk³ad</span><br><br>Mamy nastêpuj¹cy model:<br><pre>public class Model1 {<br>  <br>  @Bind private int LL; // liczba lat<br>  <br>  @Bind private  double[] twKI; // tempo wzrostu kons.ind.<br>  @Bind private  double[] twKS; // tempo wzrostu kons.spo³.<br>  @Bind private  double[] twINW; // tempo wzrostu inwestycji<br>  @Bind private  double[] twEKS; // tempo wzrostu eksportu<br>  @Bind private  double[] twIMP; // tempo wzrostu importu<br><br>  <br>  @Bind private double[] KI;  // kons.ind.<br>  @Bind private double[] KS;  // kons.spo³eczna<br>  @Bind private double[] INW;  // inwestycje.<br>  @Bind private double[] EKS;  // eksport<br>  @Bind private double[] IMP;  // import.<br>  @Bind private double[] PKB;  // PKB<br>  <br>  private double temp; // pole nie zwi¹zane z danymi dla modelu ani jego wynikami<br>  <br>  public Model1() {}<br>  <br>  public void run() {<br>    PKB = new double[LL];<br>    PKB[0] = KI[0] + KS[0] + INW[0] + EKS[0] - IMP[0];<br>    for (int t=1; t &lt; LL; t++) {<br>      KI[t] = twKI[t]* KI[t-1];<br>      KS[t] = twKS[t]* KS[t-1];<br>      INW[t] = twINW[t]* INW[t-1];<br>      EKS[t] = twEKS[t]* EKS[t-1];<br>      IMP[t] = twIMP[t]* IMP[t-1];<br>      PKB[t] = KI[t] + KS[t] + INW[t] + EKS[t] - IMP[t];<br>    }<br>  }<br>}</pre>Dla pliku data1.txt o nastêpuj¹cej postaci::<br><pre>LATA	2015 2016 2017 2018 2019<br>twKI	1.03<br>twKS	1.04<br>twINW	1.12<br>twEKS	1.13<br>twIMP	1.14<br>KI	1023752.2<br>KS	315397<br>INW	348358<br>EKS	811108.6<br>IMP	784342.4</pre>nastêpuj¹cy fragment programu g³ównego:<br><pre>    Controller ctl = new Controller("Model1");<br>    ctl.readDataFrom(dataDir + "data1.txt") <br>                    .runModel()<br>    String res= ctl.getResultsAsTsv();<br>    System.out.println(res);<br></pre>wypisze na konsoli:<br><pre>LATA	2015	2016	2017	2018	2019<br>twKI	1.03	1.03	1.03	1.03	1.03<br>twKS	1.04	1.04	1.04	1.04	1.04<br>twINW	1.12	1.12	1.12	1.12	1.12<br>twEKS	1.13	1.13	1.13	1.13	1.13<br>twIMP	1.14	1.14	1.14	1.14	1.14<br>KI	1023752.2	1054464.766	1086098.70898	1118681.6702494002	1152242.1203568822<br>KS	315397.0	328012.88	341133.3952	354778.73100800003	368969.88024832006<br>INW	348358.0	390160.96	436980.2752000001	489417.90822400013	548148.0572108802<br>EKS	811108.6	916552.7179999999	1035704.5713399998	1170346.1656141996	1322491.1671440455<br>IMP	784342.4	894150.3359999999	1019331.3830399998	1162037.7766655996	1324723.0653987834<br>PKB	1714273.4	1795040.9880000001	1880585.5676800003	1971186.6984300003	2067128.1595613444<br></pre>a dla pliku data2.txt, wygl¹daj¹cego tak:<br><pre>LATA	2015 2016 2017 2018 2019<br>twKI	1.03 1.05 1.07<br>twKS	1.04<br>twINW	1.12<br>twEKS	1.13<br>twIMP	1.14<br>KI	1023752.2<br>KS	315397<br>INW	348358<br>EKS	811108.6<br>IMP	784342.4</pre><br><br>uzyskamy po <br><pre>ctl.readDataFrom(dataDir + "data2.txt").runModel()</pre>wynik:<br><pre>LATA	2015	2016	2017	2018	2019<br>twKI	1.03	1.05	1.07	1.07	1.07<br>twKS	1.04	1.04	1.04	1.04	1.04<br>twINW	1.12	1.12	1.12	1.12	1.12<br>twEKS	1.13	1.13	1.13	1.13	1.13<br>twIMP	1.14	1.14	1.14	1.14	1.14<br>KI	1023752.2	1074939.81	1150185.5967	1230698.5884690003	1316847.4896618305<br>KS	315397.0	328012.88	341133.3952	354778.73100800003	368969.88024832006<br>INW	348358.0	390160.96	436980.2752000001	489417.90822400013	548148.0572108802<br>EKS	811108.6	916552.7179999999	1035704.5713399998	1170346.1656141996	1322491.1671440455<br>IMP	784342.4	894150.3359999999	1019331.3830399998	1162037.7766655996	1324723.0653987834<br>PKB	1714273.4	1815516.032	1944672.4554000003	2083203.6166496002	2231733.528866293<br></pre><span style="font-weight: bold;">4. Skrypty</span><br><br>Skrypty
naj³atwiej bêdzie pisaæ w jêzyku Groovy. W skryptach maj¹ byæ dostêpne
wszystkie wczytane dane oraz &nbsp;dane z modelu (ale tylko oznaczone
przez @Bind).<br>Zmienne utworzone w skrypcie maj¹ byæ dostêpne zarówno
w wynikowym tsv, jak i w ew. innych modelach (o ile wystêpuj¹ tam
&nbsp;jako pola oznaczone przez @Bind), a tak¿e innych skryptach.
Wyj¹tkiem od tej regu³y s¹ zmienne&nbsp;o jednoliterowych nazwach
&nbsp;pisanych ma³¹ liter¹ (np. i, j k, p) - te zmienne nie bêd¹
widoczne w wynikach ani dostêpne w modelach czy innych skryptach.<br><br>Przyk³adowy
skrypt, zapisany w pliku script1.groovy&nbsp; mo¿e wygl¹daæ tak
(obliczany tu jest wskaŸnik tzw. zdolnoœci eksportowej):<br><pre>ZDEKS = new double[LL]<br>for (i = 0; i &lt; LL; i++) {<br>  ZDEKS[i] =  EKS[i]/PKB[i];<br>}</pre>Uwaga:
w tym skrypcie dostêpna jest zmienna LL, oznaczaj¹ca liczbê lat oraz
zmienne powsta³e w wyniku obliczen modelowych (PKB i EKS). Skrypt
tworzy nowe zmienne ZDEKS oraz i, ale tylko ZDEKS bêdzie &nbsp;widoczna
w wynikach i dostêpna dla innych modeli i skryptów.<br><br>Przyk³adowe wywo³anie:<br><pre>    Controller ctl = new Controller("Model1");<br>    ctl.readDataFrom(dataDir + "data2.txt") <br>                    .runModel()<br>                    .runScriptFromFile(scriptDir + "script1.groovy");<br>    String res= ctl.getResultsAsTsv();<br>    System.out.println(res);<br></pre>wypisze:<br><br><pre>LATA	2015	2016	2017	2018	2019<br>twKI	1.03	1.05	1.07	1.07	1.07<br>twKS	1.04	1.04	1.04	1.04	1.04<br>twINW	1.12	1.12	1.12	1.12	1.12<br>twEKS	1.13	1.13	1.13	1.13	1.13<br>twIMP	1.14	1.14	1.14	1.14	1.14<br>KI	1023752.2	1074939.81	1150185.5967	1230698.5884690003	1316847.4896618305<br>KS	315397.0	328012.88	341133.3952	354778.73100800003	368969.88024832006<br>INW	348358.0	390160.96	436980.2752000001	489417.90822400013	548148.0572108802<br>EKS	811108.6	916552.7179999999	1035704.5713399998	1170346.1656141996	1322491.1671440455<br>IMP	784342.4	894150.3359999999	1019331.3830399998	1162037.7766655996	1324723.0653987834<br>PKB	1714273.4	1815516.032	1944672.4554000003	2083203.6166496002	2231733.528866293<br>ZDEKS	0.47315008212808995	0.5048441885640148	0.5325856127925489	0.561801139485567	0.5925847105123984<br></pre><span style="font-weight: bold;">5. &nbsp;GUI</span><br><br>Dodatkowe punkty (ponad ustalone max) mo¿na uzyskac za przygotowanie GUI do dzia³ania z modelami i skryptami.<br>Oto ad hoc przygotowany przyk³ad takiego interfejsu.<br><img style="width: 736px; height: 340px;" alt="r" src="S_MODELING_pliki/rys1.jpg"><br><br>Po naciœniêciu "Run model":<br><br><img style="width: 736px; height: 340px;" alt="r" src="S_MODELING_pliki/rys2.jpg"><br><br>Uwaga: proszê zwróciæ uwagê na formatowanie liczb<br><br>Mo¿na teraz wybraæ skrypt z pliku:<br><img style="width: 880px; height: 653px;" alt="r" src="S_MODELING_pliki/rys3.jpg"><br><br>i od razu zobaczyæ dodatkowy wynik:<br><img style="width: 900px; height: 343px;" alt="r" src="S_MODELING_pliki/rys4.jpg"><br><br>albo wybraæ "Create and run ad hoc script" aby wpisaæ kod skryptu:<br><img style="width: 514px; height: 408px;" alt="r" src="S_MODELING_pliki/rys5.jpg">&nbsp;<br>i od razu uzyskac wynik:<br><br><img style="width: 736px; height: 384px;" alt="r" src="S_MODELING_pliki/rys6.jpg"><br><span style="font-weight: bold;"><br><br>6. Dodatkowe w³aœciwoœci</span><br><br>Warto pomyœleæ nad tym jak uproœcic pisanie skryptów. Np. zamiast:<br><pre>DPKB = new double[LL]<br>for (t = 0; t &lt; LL; t++) {<br>  DPKB[t] = PKB[t]/PKB[0]*100<br>}</pre>chcielibyœmy pisaæ tak:<br><br><pre>DPKB = PKB/PKB[0]</pre><br>To nie jest trudne. Procentuje dodatkowymi punktami ponad max.<br><hr style="width: 100%; height: 2px;"><br><a name="zad"></a>I wreszcie ....<br><div style="text-align: center;"><span style="font-weight: bold;">Zadanie do wykonania</span><br></div><br>Maj¹c wygenerowany projekt z klas¹ Main oraz models.Model1, a tak¿e plik z danymi wejœciowymi data1.txt:<br><pre>LATA	2015 2016 2017 2018 2019<br>twKI	1.03<br>twKS	1.04<br>twINW	1.12<br>twEKS	1.13<br>twIMP	1.14<br>KI	1023752.2<br>KS	315397<br>INW	348358<br>EKS	811108.6<br>IMP	784342.4</pre>oraz plik skryptu script1.groovy:<br><br><pre>ZDEKS = new double[LL]<br>for (i = 0; i &lt; LL; i++) {<br>  ZDEKS[i] =  EKS[i]/PKB[i];<br>}</pre>zdefinowaæ adnotacjê @Bind oraz klasê Controller w taki sposób, aby poni¿szy program:<br><br><pre>public class Main {<br><br>  public static void main(String[] args) {<br>    String dataDir = System.getProperty("user.home") + "/Modeling/data/";<br>    String scriptDir = System.getProperty("user.home") + "/Modeling/scripts/";<br>    Controller ctl = new Controller("Model1");<br>    ctl.readDataFrom(dataDir + "data2.txt") <br>                    .runModel()<br>                    .runScriptFromFile(scriptDir + "script1.groovy");<br>    String res= ctl.getResultsAsTsv();<br>    System.out.println(res);<br>  }<br>}</pre>wyprowadzi³ na konsolê:<br><pre>LATA	2015	2016	2017	2018	2019<br>twKI	1.03	1.05	1.07	1.07	1.07<br>twKS	1.04	1.04	1.04	1.04	1.04<br>twINW	1.12	1.12	1.12	1.12	1.12<br>twEKS	1.13	1.13	1.13	1.13	1.13<br>twIMP	1.14	1.14	1.14	1.14	1.14<br>KI	1023752.2	1074939.81	1150185.5967	1230698.5884690003	1316847.4896618305<br>KS	315397.0	328012.88	341133.3952	354778.73100800003	368969.88024832006<br>INW	348358.0	390160.96	436980.2752000001	489417.90822400013	548148.0572108802<br>EKS	811108.6	916552.7179999999	1035704.5713399998	1170346.1656141996	1322491.1671440455<br>IMP	784342.4	894150.3359999999	1019331.3830399998	1162037.7766655996	1324723.0653987834<br>PKB	1714273.4	1815516.032	1944672.4554000003	2083203.6166496002	2231733.528866293<br>ZDEKS	0.47315008212808995	0.5048441885640148	0.5325856127925489	0.561801139485567	0.5925847105123984<br></pre>Specyfikacje u¿ytych metod klasy Controller podano w p. 1 objaœnieñ.<br><br>Plików
Main.java oraz Model1.java nie wolno modyfikowaæ. Umiejscowienie plików
data1.txt i script1.groovy jest okreslone przez metodê main klasy Main.<br>Przygotowaæ
program tak, aby dzia³a³ dla innych modeli i danych oraz innych
skryptów. Aby to przetestowac mo¿na stworzyæ dodatkowe klasy w pakiecie.<br><br>Dodatkowe punkty ponad max uzyskujemy za:<br><ul><li>przygotowanie GUI (zob. p. 5 objaœnieñ)</li><li>u³atwienia w pisaniu skryptów&nbsp; (zob. p. 6 objaœnieñ)</li></ul><br><hr style="width: 100%; height: 2px;"><span style="font-weight: bold;"><a name="spom"></a>Skrypty - pomoc</span><br><br>Skrypty piszemy w jêzyku Groovy bo pisaæ mozna tak samo jak w Javie, a dodatkowo jest b. du¿o u³atwieñ.<br>Aby&nbsp;móg³
&nbsp;byæ odnaleziony Script Engine groovy'ego na œcie¿ce CLASSPATH (w
Eclipse - Buildpath) musi byæ umieszczony groovy-all -x.x.x.jar<br>np. groovy-all-2.4.5.jar &nbsp;(mo¿na go wzi¹æ z katalogu P:\FTP(Public)\kb\UTP\Cwiczenia)..<br><br>JAR
nalezy umieœciæ w zewnêtrznym wobec projektu &nbsp;katalogu (np.
C\'ExtLib) i podaæ go pod "External JAR files" w Buildpath Configure.<br><span style="color: rgb(1, 0, 0); font-weight: bold;">Nie przysylamy JARow z projektem!</span><br><br><br>
</body></html>